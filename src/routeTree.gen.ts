/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as CreateAccountImport } from './routes/create-account'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as AuthHomeImport } from './routes/_auth/home'
import { Route as AuthHomeDashboardImport } from './routes/_auth/home/dashboard'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const CreateAccountRoute = CreateAccountImport.update({
  id: '/create-account',
  path: '/create-account',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthHomeRoute = AuthHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AuthRoute,
} as any)

const AuthHomeDashboardRoute = AuthHomeDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthHomeRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/create-account': {
      id: '/create-account'
      path: '/create-account'
      fullPath: '/create-account'
      preLoaderRoute: typeof CreateAccountImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_auth/home': {
      id: '/_auth/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AuthHomeImport
      parentRoute: typeof AuthImport
    }
    '/_auth/home/dashboard': {
      id: '/_auth/home/dashboard'
      path: '/dashboard'
      fullPath: '/home/dashboard'
      preLoaderRoute: typeof AuthHomeDashboardImport
      parentRoute: typeof AuthHomeImport
    }
  }
}

// Create and export the route tree

interface AuthHomeRouteChildren {
  AuthHomeDashboardRoute: typeof AuthHomeDashboardRoute
}

const AuthHomeRouteChildren: AuthHomeRouteChildren = {
  AuthHomeDashboardRoute: AuthHomeDashboardRoute,
}

const AuthHomeRouteWithChildren = AuthHomeRoute._addFileChildren(
  AuthHomeRouteChildren,
)

interface AuthRouteChildren {
  AuthHomeRoute: typeof AuthHomeRouteWithChildren
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthHomeRoute: AuthHomeRouteWithChildren,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/create-account': typeof CreateAccountRoute
  '/login': typeof LoginRoute
  '/home': typeof AuthHomeRouteWithChildren
  '/home/dashboard': typeof AuthHomeDashboardRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/create-account': typeof CreateAccountRoute
  '/login': typeof LoginRoute
  '/home': typeof AuthHomeRouteWithChildren
  '/home/dashboard': typeof AuthHomeDashboardRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/create-account': typeof CreateAccountRoute
  '/login': typeof LoginRoute
  '/_auth/home': typeof AuthHomeRouteWithChildren
  '/_auth/home/dashboard': typeof AuthHomeDashboardRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/create-account'
    | '/login'
    | '/home'
    | '/home/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/create-account' | '/login' | '/home' | '/home/dashboard'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/create-account'
    | '/login'
    | '/_auth/home'
    | '/_auth/home/dashboard'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  CreateAccountRoute: typeof CreateAccountRoute
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  CreateAccountRoute: CreateAccountRoute,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/create-account",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/home"
      ]
    },
    "/create-account": {
      "filePath": "create-account.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_auth/home": {
      "filePath": "_auth/home.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/home/dashboard"
      ]
    },
    "/_auth/home/dashboard": {
      "filePath": "_auth/home/dashboard.tsx",
      "parent": "/_auth/home"
    }
  }
}
ROUTE_MANIFEST_END */
